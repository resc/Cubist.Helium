# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build And Publish

on:   
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches: 
      - 'master'
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published     
    
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true 
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
        
    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    # Restore package dependencies
    - name: Restore dependencies
      run: dotnet restore ./src
      
    # Build everything
    - name: Build
      run: dotnet build ./src --configuration Release --no-restore
      
    # Run unit tests
    - name: Test
      run: dotnet test ./src --configuration Release --no-build --verbosity normal
      
    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Pack
      run: dotnet pack ./src/Cubist.Helium --configuration Release --no-build --no-restore --output ${{ env.NuGetDirectory }}
      
    # Publish the NuGet package as an artifact, so they can be used in the publish job
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg
  
  publish:
    # Publish only when creating a GitHub Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      
      - name: Publish NuGet package
        run: |
          foreach ($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
            dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
     
